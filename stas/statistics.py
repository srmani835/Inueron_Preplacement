# -*- coding: utf-8 -*-
"""Statistics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IosLAZ5ogPNZiIyKD2XlMcdvyzDyrwVs

# **1**
 A university wants to understand the relationship between the SAT scores of its
applicants and their college GPA. They collect data on 500 students, including their SAT
scores (out of 1600) and their college GPA (on a 4.0 scale). They find that the correlation
coefficient between SAT scores and college GPA is 0.7. What does this correlation
coefficient indicate about the relationship between SAT scores and college GPA?

Answer:

Correlation coefficient is a stastical measure the strength of relationship between two variables. We will be using the Pearson values to determine the coefficient. It ranges from -1 to 1. If the coeeficent value is -1 between SAT score and GPA then we can say they are negatively correlated. If it is 1 then we can say they are positively correlated. If it is 0 then there is no correlation between the STA score and GPA.

# **2**
 Consider a dataset containing the heights (in centimeters) of 1000 individuals. The
mean height is 170 cm with a standard deviation of 10 cm. The dataset is approximately
normally distributed, and its skewness is approximately zero. Based on this information,
answer the following questions:

# 2A
 What percentage of individuals in the dataset have heights between 160 cm and 180 cm?

Answer: Since it is a normal distrubition with mean 170 cm  and std of 10 cm the 160 cm and 180 cn fall with in 1 std. If it fall within 1 std it will be 68 percent.

# 2B
  If we randomly select 100 individuals from the dataset, what is the probability that their average height is greater than 175 cm?

Answer:
calculate z score using the z=(x-u)/(sigma) we will be getting z=0.5 and corresponding probability value is 0.69146. probability that their average height greater than 175=1-0.69146=0.30 30 percentage of students will have average height greater than 175 cm.

# 2C
 Assuming the dataset follows a normal distribution, what is the z-score corresponding to a height of 185 cm?

Ans:  z=(185-170)/10=1.5 and corresponding z value is 0.93319.

# 2D 
We know that 5% of the dataset has heights below a certain value. What is the approximate height corresponding to this threshold?


Answer: 

Height below 150 cm and height above 190 cm will contibute to that 5 percent.

# 2E
 Calculate the coefficient of variation (CV) for the dataset.

Ans: cv=(10/170)*100=5.88. It tells std is 5.88 percent of mean.

# 2F
 Calculate the skewness of the dataset and interpret the result.

Ans: The skewness is zero since it is perfectly normal distrubution.

# Q_3

Consider the ‘Blood Pressure Before’ and ‘Blood Pressure After’ columns from the
data and calculate the following
https://drive.google.com/file/d/1mCjtYHiX--mMUjicuaP2gH3k-SnFxt8Y/view?usp=share_
"""

#Question_a: Measure the dispersion in both and interpret the results.
import pandas as pd
df=pd.read_csv('/content/data.csv') # reading the CSV file
# for measuring dispersion we are calculating Range, Variance, standard deviation
# Range_calculation: It is difference between max and mix value
Range_BP_after=(df[' Blood Pressure After (mmHg)'].max())-(df[' Blood Pressure After (mmHg)'].min())
Range_BP_before=(df[' Blood Pressure Before (mmHg)'].max())-(df[' Blood Pressure Before (mmHg)'].min())
print(f"The Range for BP_after is {Range_BP_after} and The Range for BP_before is {Range_BP_before}")
# calculating the variance
variance_BP_after=df[' Blood Pressure After (mmHg)'].var()
variance_BP_before=df[' Blood Pressure Before (mmHg)'].var()
print(f"The variance  for BP_after is {variance_BP_after} and the variance for BP_before is {variance_BP_before}")
#calculating the standard deviation:
std_BP_after=df[' Blood Pressure After (mmHg)'].std()
std_BP_before=df[' Blood Pressure Before (mmHg)'].std()

print(f"The std for BP_after is {std_BP_after} and the std for BP_before is {std_BP_before}")

df[' Blood Pressure After (mmHg)'].mean()

#Question_b:
# Calculate mean and 5% confidence interval and plot it in a graph

mean_BP_after=df[' Blood Pressure After (mmHg)'].mean()
mean_BP_before=df[' Blood Pressure Before (mmHg)'].mean()
print(f"The mean for BP_after is {mean_BP_after} and the mean for BP_before is {mean_BP_before}")

import numpy as np
import scipy.stats as st



data_before = list(df[' Blood Pressure Before (mmHg)'])
data_after = list(df[' Blood Pressure Before (mmHg)'])


#create 95% confidence interval for population mean weight
#st.norm.interval(alpha=0.95, loc=128.36, scale=st.sem(data_before))

c_i_before=st.t.interval(confidence=0.95, df=len(df[' Blood Pressure Before (mmHg)']),
              loc=133.91,
              scale=st.sem(data_before))
c_i_after=st.t.interval(confidence=0.95, df=len(df[' Blood Pressure After (mmHg)']),
              loc=128.36,
              scale=st.sem(data_after))

print(f"The CI for BP_after is {c_i_after} and the CI for BP_before is {c_i_before}")



df[' Blood Pressure Before (mmHg)'].plot(kind='kde')

#distubution plot for BP After dosage
df[' Blood Pressure After (mmHg)'].plot(kind='kde')

"""Question_3: Calculate the Mean absolute deviation and Standard deviation"""

# Mean absolute deviation:
mad_after=df[' Blood Pressure After (mmHg)'].mad()
mad_before=df[' Blood Pressure Before (mmHg)'].mad()
print(f"The mean absolute deviation for BP_after is {mad_after} and the mean absolute deviation for BP_before is {mad_before}")

#std:

std_after=df[' Blood Pressure After (mmHg)'].std()
std_before=df[' Blood Pressure Before (mmHg)'].std()
print(f"The standard deviation for BP_after is {std_after} and the standard deviation for BP_before is {std_before}")

"""

Calculate the correlation coefficient and check the significance of it at 1% level"""

from scipy.stats.stats import pearsonr

#calculation correlation coefficient and p-value between x and y
pearsonr(df[' Blood Pressure After (mmHg)'],df[' Blood Pressure Before (mmHg)'])

#(0.8076177030748631, 0.004717255828132089)

"""# Q_4:
 A group of 20 friends decide to play a game in which they each write a number
between 1 and 20 on a slip of paper and put it into a hat. They then draw one slip of paper
at random. What is the probability that the number on the slip of paper is a perfect square
(i.e., 1, 4, 9, or 16)?

**Answer:**

P(perfect_square)=4/20=0.2

Probablity of a getting perfect square=0.2

**Question 5:**

 A certain city has two taxi companies: Company A has 80% of the taxis and
Company B has 20% of the taxis. Company A's taxis have a 95% success rate for picking
up passengers on time, while Company B's taxis have a 90% success rate. If a randomly
selected taxi is late, what is the probability that it belongs to Company A?

**Answer:**
Probability of A is 0.8

Probability of not A is 0.2 which is probability of B.

Probability of picking intime by A given A is 0.95

Probability of not picking intime by A given A is 0.05

Probability of picking intime by B given B is 0.9

Probability of not picking intime by B given B is 0.1

probability=(0.8*0.05)/(0.8*0.05+0.1*0.2)=0.6667

probability that taxi is late and it belongs to company A is 67%.

# Question 6:

 To check if the change in Blood pressure before and after  follows the normal distrubution.
"""

import scipy.stats as stats
import matplotlib.pyplot as plt
df['bp_change']= df[' Blood Pressure After (mmHg)']-df[' Blood Pressure Before (mmHg)']
stats.probplot(df['bp_change'], dist="norm", plot=plt)

# Shapiro-Wilk Test

from scipy.stats import shapiro

# normality test
stat, p = shapiro(df['bp_change'])
print('Statistics=%.3f, p=%.3f' % (stat, p))
# interpret
alpha = 0.05
if p > alpha:
 print('Sample looks Gaussian (fail to reject H0)')
else:
 print('Sample does not look Gaussian (reject H0)')

"""# **Question_7**
 The equations of two lines of regression, obtained in a correlation analysis
between variables X and Y are as follows:
and . 2𝑋 + 3 − 8 = 0 2𝑌 + 𝑋 − 5 = 0 The variance of 𝑋 = 4 Find the
a. Variance of Y
b. Coefficient of determination of C and Y
c. Standard error of estimate of X on Y and of Y on X.

y=−0.5x+2.5   
m1=-0.5
x=−1.5y+4
m2=-1.5
r^2=0.75
r=±0.866

b. Coeeficient of variation = -0.866

a. Variance of y (sigma^2)=4

c. Standard error of estimate of X on Y and Y on X:
The standard error of estimate represents the standard deviation of the residuals (the differences between the observed and predicted values) in the regression analysis.

To find the standard error of estimate of X on Y, we need to find the standard deviation of the residuals in equation (1).

Rearranging equation (1) to solve for 𝑌 in terms of 𝑋:
𝑌 = (8 - 2𝑋) / 3

Substituting the given value of 𝑋 = 1 into this equation:
𝑌 = (8 - 2(1)) / 3 = 6 / 3 = 2

Now, calculate the residual by subtracting the observed 𝑌 value (2) from the predicted 𝑌 value (2 from the equation):
Residual = 2 - 2 = 0

Since we only have one data point, the standard error of estimate of X on Y is 0.

To find the standard error of estimate of Y on X, we need to find the standard deviation of the residuals in equation (2).

Rearranging equation (2) to solve for 𝑌 in terms of 𝑋:
𝑌 = 5

# Q-8. 
The anxiety levels of 10 participants were measured before and after a new therapy.
The scores are not normally distributed. Use the Wilcoxon signed-rank test to test whether
the therapy had a significant effect on anxiety levels. The data is given below: Participant
Before therapy After therapy Difference
"""

from scipy.stats import wilcoxon

# Data
before_therapy = [10, 8, 12, 15, 6, 9, 11, 7, 14, 10]
after_therapy = [7, 6, 10, 12, 5, 8, 9, 6, 12, 8]

# Perform Wilcoxon signed-rank test
statistic, p_value = wilcoxon(before_therapy, after_therapy)

# Output results
print("Wilcoxon signed-rank test:")
print("Statistic:", statistic)
print("p-value:", p_value)

"""# QUES:9
Test the hypothesis that the mean scores of all the students are the same. If not, name the
student with the highest score.
"""

import pandas as pd
import scipy.stats as stats

# Student scores
scores = {
    'name': ['a', 'b', 'c', 'd', 'e'],
    'exam_1': [85, 70, 90, 75, 95],
    'exam_2': [90, 80, 85, 70, 92],
    'final_exam': [92, 85, 88, 75, 96]
}

# Create a DataFrame from the scores dictionary
df = pd.DataFrame(scores)

# Perform one-way ANOVA
f_statistic, p_value = stats.f_oneway(df['exam_1'], df['exam_2'], df['final_exam'])

# Output ANOVA results
print("One-way ANOVA test:")
print("F-statistic:", f_statistic)
print("p-value:", p_value)

# Find the student with the highest score
df['total_score'] = df['exam_1'] + df['exam_2'] + df['final_exam']
highest_score_student = df.loc[df['total_score'].idxmax(), 'name']
highest_score = df['total_score'].max()
print("Student with the highest score:", highest_score_student)
print("Highest score:", highest_score)

"""# Q-10. 
A factory produces light bulbs, and the probability of a bulb being defective is 0.05.
The factory produces a large batch of 500 light bulbs.
a. What is the probability that exactly 20 bulbs are defective?
b. What is the probability that at least 10 bulbs are defective?
c. What is the probability that at max 15 bulbs are defective?
d. On average, how many defective bulbs would you expect in a batch of 500?

To solve these we can use the binomial probability formula. In the binomial distribution, we have the following parameters:

n: Number of trials (in this case, the number of light bulbs in the batch, which is 500).
p: Probability of success (in this case, the probability of a bulb being defective, which is 0.05).
x: Number of successful trials (the number of defective bulbs).

# A.
 To find the probability that exactly 20 bulbs are defective:
We use the binomial probability formula: P(x) = nCx * p^x * (1 - p)^(n - x)
P(20) = 500C20 * 0.05^20 * (1 - 0.05)^(500 - 20)=0.04

# B
 To find the probability that at least 10 bulbs are defective:
We can find the probability of 0 to 9 bulbs being defective and subtract that from 1.
P(at least 10) = 1 - P(0 to 9)
P(at least 10) = 1 - (P(0) + P(1) + P(2) + ... + P(9))= 0.9997 or 99.97%.

# C
 To find the probability that at most 15 bulbs are defective:
We can find the probability of 0 to 15 bulbs being defective and sum them up.
P(at most 15) = P(0) + P(1) + P(2) + ... + P(15)= 0.9995 or 99.95%.

# D
On average, the number of defective bulbs we would expect in a batch of 500 can be calculated using the expected value formula:
Expected value (μ) = n * p
Expected value (μ) = 500 * 0.05
Expected value (μ) = 25

Therefore, on average, we would expect 25 defective bulbs in a batch of 500.

# Q-11.

 Given the data of a feature contributing to different classes
a. Check whether the distribution of all the classes are the same or not.
b. Check for the equality of variance/
c. Which amount LDA and QDA would perform better on this data for
classification and why.
d. Check the equality of mean for between all the classes.
"""

import scipy.stats as stats
import pandas as pd

# Blood pressure data
df = pd.read_csv('data.csv')

# a. Paired t-test
t_statistic, p_value = stats.ttest_rel(df[' Blood Pressure Before (mmHg)'],
                                       df[' Blood Pressure After (mmHg)'])
print(f"a. Paired t-test: t = {t_statistic}, p-value = {p_value}")

# b. Levene's test for equality of variance
statistic, p_value = stats.levene(df[' Blood Pressure Before (mmHg)'],
                                  df[' Blood Pressure After (mmHg)'])
print(f"b. Levene's test: statistic = {statistic}, p-value = {p_value}")

# c. More information needed about classes or groups for LDA and QDA comparison

# d. Paired t-test for equality of means
t_statistic, p_value = stats.ttest_rel(df[' Blood Pressure Before (mmHg)'],
                                       df[' Blood Pressure After (mmHg)'])
print(f"d. Paired t-test for means: t = {t_statistic}, p-value = {p_value}")

"""# Que:12
 
 A pharmaceutical company develops a new drug and wants to compare its
effectiveness against a standard drug for treating a particular condition. They conduct a
study with two groups: Group A receives the new drug, and Group B receives the standard
drug. The company measures the improvement in a specific symptom for both groups after
a 4-week treatment period.
a. The company collects data from 30 patients in each group and calculates the
mean improvement score and the standard deviation of improvement for each
group. The mean improvement score for Group A is 2.5 with a standard
deviation of 0.8, while the mean improvement score for Group B is 2.2 with a
standard deviation of 0.6. Conduct a t-test to determine if there is a significant
difference in the mean improvement scores between the two groups. Use a
significance level of 0.05.
b. Based on the t-test results, state whether the null hypothesis should be
rejected or not. Provide a conclusion in the context of the study.

"""

import scipy.stats as stats

# Group A data
mean_A = 2.5
std_A = 0.8
n_A = 30

# Group B data
mean_B = 2.2
std_B = 0.6
n_B = 30

# Conduct t-test
t_statistic, p_value = stats.ttest_ind_from_stats(mean_A, std_A, n_A, mean_B, std_B, n_B)

# Print results
print(f"t-statistic: {t_statistic}")
print(f"p-value: {p_value}")

"""a. The t-test is conducted to determine if there is a significant difference in the mean improvement scores between Group A and Group B. The significance level is set to 0.05.

b. Based on the t-test results, we compare the p-value to the significance level (0.05) to make a conclusion. If the p-value is less than 0.05, we reject the null hypothesis. If the p-value is greater than or equal to 0.05, we fail to reject the null hypothesis. We receive p value as 0.1. so we failed to reject the null hypothesis

"""

